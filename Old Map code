package com.firstapp.maptest

import android.Manifest
import android.annotation.SuppressLint
import android.content.Context
import android.content.Intent
import android.content.pm.PackageManager
import android.graphics.Color
import android.location.Location
import android.location.LocationManager
import android.os.Build
import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import android.provider.Settings
import android.view.Gravity
import android.view.Menu
import android.view.MenuItem
import android.view.View
import android.widget.FrameLayout
import android.widget.Toast
import androidx.core.app.ActivityCompat
import androidx.core.view.get
import com.firstapp.maptest.databinding.ActivityMainBinding
import com.google.android.gms.location.FusedLocationProviderClient
import com.google.android.gms.location.LocationServices
import com.mapbox.geojson.FeatureCollection
import com.mapbox.geojson.Point
import com.mapbox.geojson.Polygon
import com.mapbox.maps.CameraBoundsOptions

import com.mapbox.maps.CoordinateBounds
import com.mapbox.maps.MapView

import com.mapbox.maps.extension.style.sources.generated.GeoJsonSource
import com.mapbox.maps.extension.style.sources.generated.geoJsonSource
import com.mapbox.maps.extension.style.sources.getSource
import com.mapbox.maps.extension.style.style
import com.mapbox.maps.plugin.attribution.attribution
import com.mapbox.maps.plugin.compass.compass
import com.mapbox.maps.plugin.gestures.gestures
import com.mapbox.maps.plugin.logo.logo
import com.mapbox.maps.plugin.scalebar.scalebar


class MainActivity : AppCompatActivity() {
    private lateinit var mapboxMap: MapView
    private lateinit var binding: ActivityMainBinding
    private lateinit var fusedLocationProviderClient: FusedLocationProviderClient
    private var lat: Double = 0.0
    private var long: Double = 0.0
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)


        fusedLocationProviderClient= LocationServices.getFusedLocationProviderClient(this)
        getCurrentLocation()

        binding = ActivityMainBinding.inflate(layoutInflater)
        mapboxMap = binding.mapView
        mapboxMap.scalebar.updateSettings { enabled = false }
        mapboxMap.logo.updateSettings { enabled = false }
        mapboxMap.compass.updateSettings { enabled = false }
        mapboxMap.attribution.updateSettings { enabled = false }
        mapboxMap.gestures.rotateEnabled = false
        mapboxMap.gestures.pitchEnabled = false
        setContentView(binding.root)

        binding.mapView.getMapboxMap().loadStyle(
            styleExtension = style(getString(R.string.mapbox_styleURL)) {
                +geoJsonSource(BOUNDS_ID) {
                    featureCollection(FeatureCollection.fromFeatures(listOf()))
                }
            }
        ){ setupBounds(USER_BOUNDS) }




    }

    private fun getCurrentLocation(){
        if(checkPermissions()){
            if(isLocationEnabled()){
                if (ActivityCompat.checkSelfPermission(
                        this,
                        Manifest.permission.ACCESS_FINE_LOCATION
                    ) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(
                        this,
                        Manifest.permission.ACCESS_COARSE_LOCATION
                    ) != PackageManager.PERMISSION_GRANTED
                ) {
                    requestPermissions()
                    return
                }
                fusedLocationProviderClient.lastLocation.addOnCompleteListener(this){
                    task -> val location: Location?=task.result
                    if(location == null){
                        Toast.makeText(this, "Unknown exception", Toast.LENGTH_SHORT).show()
                    }
                    else{
                        Toast.makeText(this, "Great Success", Toast.LENGTH_SHORT).show()
                        lat  = location.latitude
                        long = location.longitude
                        Toast.makeText(this, "$lat  and $long", Toast.LENGTH_SHORT).show()
                    }
                }
            }
            else{
                Toast.makeText(this, "Turn on your location", Toast.LENGTH_SHORT).show()
                val intent = Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS)
                startActivity(intent)
            }
        }
        else{
            requestPermissions()
        }


    }

    private fun isLocationEnabled(): Boolean {
            val locationManager:LocationManager = getSystemService(Context.LOCATION_SERVICE) as LocationManager
            return  locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER) || locationManager.isProviderEnabled(LocationManager.NETWORK_PROVIDER)
    }

    private fun requestPermissions() {
       ActivityCompat.requestPermissions(
           this, arrayOf(Manifest.permission.ACCESS_COARSE_LOCATION, Manifest.permission.ACCESS_FINE_LOCATION),  PERMISSION_REQUEST_ACCESS_LOCATION)

    }

    private fun checkPermissions():Boolean{
        //read more on this what ia acitivty compat
        return ActivityCompat.checkSelfPermission(this,Manifest.permission.ACCESS_COARSE_LOCATION)==PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(this,Manifest.permission.ACCESS_FINE_LOCATION)==PackageManager.PERMISSION_GRANTED
    }
    override fun onCreateOptionsMenu(menu: Menu): Boolean {
        menuInflater.inflate(R.menu.menu_bounds, menu)
        return true
    }

    override fun onRequestPermissionsResult(
        requestCode: Int,
        permissions: Array<out String>,
        grantResults: IntArray
    ) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)

        if(requestCode == PERMISSION_REQUEST_ACCESS_LOCATION){
                if(grantResults.isNotEmpty() && grantResults[0] == PackageManager.PERMISSION_GRANTED)
                    Toast.makeText(applicationContext,"Granted Location", Toast.LENGTH_LONG).show()
                    getCurrentLocation()
            }
            else{
            Toast.makeText(applicationContext,"Denied Location", Toast.LENGTH_LONG).show()
        }
    }

    private fun setupBounds(bounds: CameraBoundsOptions) {
        mapboxMap.getMapboxMap().setBounds(bounds)
        showBoundsArea(bounds)
    }

    private fun showBoundsArea(boundsOptions: CameraBoundsOptions) {
        val source = mapboxMap.getMapboxMap().getStyle()!!.getSource(BOUNDS_ID) as GeoJsonSource
        val bounds = boundsOptions.bounds
        val list = mutableListOf<List<Point>>()
        bounds?.let {
            if (!it.infiniteBounds) {
                val northEast = it.northeast
                val southWest = it.southwest
                val northWest = Point.fromLngLat(southWest.longitude(), northEast.latitude())
                val southEast = Point.fromLngLat(northEast.longitude(), southWest.latitude())
                list.add(
                    mutableListOf(northEast, southEast, southWest, northWest, northEast)
                )
            }
        }
        if (list.isNotEmpty()) {
            source.geometry(
                Polygon.fromLngLats(
                    list
                )
            )
        }
    }

    companion object {
        private const val PERMISSION_REQUEST_ACCESS_LOCATION=100
        private const val BOUNDS_ID = "BOUNDS_ID"
        private val USER_BOUNDS: CameraBoundsOptions = CameraBoundsOptions.Builder()
            .bounds(
                CoordinateBounds(
                    Point.fromLngLat(-122.66336, 37.492987),
                    Point.fromLngLat(-122.250481, 37.87165),
                    false
                )
            )
            .minZoom(10.0)
            .build()

        private val ALMOST_WORLD_BOUNDS: CameraBoundsOptions = CameraBoundsOptions.Builder()
            .bounds(
                CoordinateBounds(
                    Point.fromLngLat(-170.0, -20.0),
                    Point.fromLngLat(170.0, 20.0),
                    false
                )
            )
            .minZoom(2.0)
            .build()

        @SuppressLint("Range")
        private val CROSS_IDL_BOUNDS: CameraBoundsOptions = CameraBoundsOptions.Builder()
            .bounds(
                CoordinateBounds(
                    Point.fromLngLat(170.0202020, -20.0),
                    Point.fromLngLat(190.0, 20.0),
                    false
                )
            )
            .minZoom(2.0)
            .build()

        private val INFINITE_BOUNDS: CameraBoundsOptions = CameraBoundsOptions.Builder()
            .bounds(
                CoordinateBounds(
                    Point.fromLngLat(0.0, 0.0),
                    Point.fromLngLat(0.0, 0.0),
                    true
                )
            )
            .build()
    }
}
